version: 2.1

executors:
  python-executor:
    docker:
      - image: cimg/python:3.14

jobs:
  run_unit_tests:
    executor: python-executor
    steps:
      - checkout
      - restore_cache:
          keys:
            - v2-dependencies-{{ checksum "requirements.txt" }}
      - run:
          name: Set PYTHONPATH
          command: echo 'export PYTHONPATH=$PYTHONPATH:/home/circleci/project' >> $BASH_ENV
      - run:
          name: Install Dependencies and Run Unit Tests
          command: |
            python -m venv venv
            . venv/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt
            pytest --maxfail=5 --disable-warnings
      - save_cache:
          paths:
            - ~/.cache/pip
            - venv
          key: v2-dependencies-{{ checksum "requirements.txt" }}

  create_env_and_run_bot:
    executor: python-executor
    steps:
      - checkout
      - restore_cache:
          keys:
            - v2-dependencies-{{ checksum "requirements.txt" }}
      - run:
          name: Set PYTHONPATH
          command: echo 'export PYTHONPATH=$PYTHONPATH:/home/circleci/project' >> $BASH_ENV
      - run:
          name: Create .env file
          command: |
            echo "TOKEN=${TOKEN}" > .env
            echo "ADMIN_ID=${ADMIN_ID}" >> .env
            echo ".env file content:"
            cat .env
          when: always
      - run:
          name: Setup Environment and Run Bot
          command: |
            python -m venv venv
            . venv/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt
            python main/bot.py
          no_output_timeout: 15m
      - save_cache:
          paths:
            - ~/.cache/pip
            - venv
          key: v2-dependencies-{{ checksum "requirements.txt" }}

  create_env_and_run_bot_with_db:
    executor: python-executor
    steps:
      - checkout
      - restore_cache:
          keys:
            - v2-dependencies-{{ checksum "requirements.txt" }}
      - run:
          name: Set PYTHONPATH
          command: echo 'export PYTHONPATH=$PYTHONPATH:/home/circleci/project' >> $BASH_ENV
      - run:
          name: Create .env file
          command: |
            echo "TOKEN=${TOKEN}" > .env
            echo "ADMIN_ID=${ADMIN_ID}" >> .env
            echo ".env file content:"
            cat .env
          when: always
      - run:
          name: Setup Environment and Run Bot with DB
          command: |
            python -m venv venv
            . venv/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt
            python main/bot_with_db.py
          no_output_timeout: 15m
      - save_cache:
          paths:
            - ~/.cache/pip
            - venv
          key: v2-dependencies-{{ checksum "requirements.txt" }}

  deploy:
    machine:
      enabled: true
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "dd:fd:8d:9f:9f:d0:c8:d4:7b:5b:2e:58:d9:dc:22:b8:ff:63:66:76"
      - run:
          name: Upload Deployment Script
          command: |
            scp -o StrictHostKeyChecking=no ./deploy_script.sh ubuntu@172.31.93.105:/deploy_script.sh
      - run:
          name: Deploy to Production
          command: |
            ssh -o StrictHostKeyChecking=no ubuntu@172.31.93.105 'bash /deploy_script.sh'

workflows:
  version: 2
  build_and_test:
    jobs:
      - run_unit_tests
      - approve_bot_test:
          type: approval
          requires:
            - run_unit_tests
      - create_env_and_run_bot:
          requires:
            - approve_bot_test
      - approve_bot_db_test:
          type: approval
          requires:
            - run_unit_tests
      - create_env_and_run_bot_with_db:
          requires:
            - approve_bot_db_test
      - hold_for_approval:
          type: approval
          requires:
            - create_env_and_run_bot
      #            - create_env_and_run_bot_with_db
      - deploy:
          requires:
            - hold_for_approval
